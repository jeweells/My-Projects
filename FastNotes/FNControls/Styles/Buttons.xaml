<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:FontDialog.Styles"
                    xmlns:global="clr-namespace:FontDialog">

    <ResourceDictionary.MergedDictionaries>
        <!-- Order is important -->
        <ResourceDictionary Source="Fonts.xaml" />
        <ResourceDictionary Source="Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Style of the icon on the top bar -->
    <Style TargetType="{x:Type Button}" x:Key="HoverlessButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- Style of the minimize, maximize, close buttons -->
    <Style TargetType="{x:Type Button}" x:Key="TopBarIconButtonStyle" BasedOn="{StaticResource HoverlessButtonStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton">
        <Setter Property="Padding" Value="7" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource MainColorDarkBrush}"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                  To="{StaticResource MainColorLight}" Duration="0:0:0.3" AutoReverse="False" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <EventTrigger RoutedEvent="Button.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                  To="{StaticResource MainColorDark}" Duration="0:0:0.5" AutoReverse="False" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
        
        
        
    </Style>



    <Style x:Key="NormalButton" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource MainColorDarkBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalButtonForegroundBrush}"/>
        <Setter Property="Padding" Value="15 7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <EventTrigger RoutedEvent="Button.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                  From="{StaticResource MainColorDark}" To="{StaticResource MainColorLight}" Duration="0:0:0.3" AutoReverse="False" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <EventTrigger RoutedEvent="Button.MouseLeave">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation 
                  Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                  From="{StaticResource MainColorLight}" To="{StaticResource MainColorDark}" Duration="0:0:0.5" AutoReverse="False" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
            </EventTrigger>

        </Style.Triggers>
        
    </Style>


    <!-- Note Button-->
    <Style TargetType="{x:Type Button}" x:Key="NoteButton">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Padding" Value="7" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>



    <!-- ToggleFontStyleButton -->
    <Style TargetType="{x:Type global:FNToggleButton}" x:Key="ToggleFontStyleButton" BasedOn="{StaticResource NoteButton}">
        <Setter Property="NormalColor" Value="White" />
        <Setter Property="HoverColor" Value="{DynamicResource MainColorVeryLight}" />
        <Setter Property="PressedColor" Value="{DynamicResource MainColorDark}" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="NormalForeColor" Value="Black" />
        <Setter Property="HoverForeColor" Value="White" />
        <Setter Property="PressedForeColor" Value="White" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

</ResourceDictionary>